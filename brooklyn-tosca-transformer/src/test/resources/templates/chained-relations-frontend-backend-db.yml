tosca_definitions_version: tosca_simple_yaml_1_0_0_wd03

imports:
  - tosca-normative-types:1.0.0.wd06-SNAPSHOT

template_name: frontend-backend-database-application
template_version: 1.0.0-SNAPSHOT

description: Application composed by a frondend, a backend and a database

relationship_types:
  brooklyn.relationships.Configure:
    derived_from: tosca.relationships.DependsOn
    valid_targets: [ tosca.capabilities.Endpoint ]
    properties:
      prop.name:
        type: string
        required: false
      prop.value:
        type: string
        required: true
      prop.collection:
        type: string
        required: false

node_types:
  org.apache.brooklyn.entity.webapp.tomcat.TomcatServer:
    derived_from: tosca.nodes.Root
    description: >
      A simple Tomcat server
    properties:
      wars.root:
        type: string
        required: false
      http.port:
        type: list
        required: false
        entry_schema:
          type: string
      java.sysprops:
        type: map
        required: false
        entry_schema:
          type: string
    capabilities:
      endpoint_configuration: tosca.capabilities.Endpoint
    requirements:
      - dbConnection: tosca.nodes.Root
        type: brooklyn.relationships.Configure
        lower_bound: 0
        upper_bound: unbounded
      - endpoint_configuration: tosca.nodes.Root
        type: brooklyn.relationships.Configure
        lower_bound: 0
        upper_bound: unbounded

  org.apache.brooklyn.entity.database.mysql.MySqlNode:
    derived_from: tosca.nodes.Root
    description: |
      A MySQL server
    properties:
      creationScriptUrl:
        type: string
        required: false
    capabilities:
      dbConnection: tosca.capabilities.Endpoint.Database

topology_template:
  description:
  node_templates:

    frontend:
      type: org.apache.brooklyn.entity.webapp.tomcat.TomcatServer
      requirements:
        - endpoint_configuration:
            node: backend
            relationship: brooklyn.relationships.Configure
            properties:
              prop.collection: java.sysprops
              prop.name: brooklyn.example.backend.endpoint
              prop.value: $brooklyn:component("backend").attributeWhenReady("webapp.url")

    backend:
      type: org.apache.brooklyn.entity.webapp.tomcat.TomcatServer
      requirements:
        - dbConnection:
            node: mysql_server
            relationship: brooklyn.relationships.Configure
            properties:
              prop.collection: java.sysprops
              prop.name: brooklyn.example.db.url
              prop.value: $brooklyn:formatString("jdbc:%s%s?user=%s\\&password=%s", component("mysql_server").attributeWhenReady("datastore.url"), "visitors", "brooklyn", $brooklyn:external("brooklyn-demo-sample", "hidden-brooklyn-password"))

    mysql_server:
      type: org.apache.brooklyn.entity.database.mysql.MySqlNode


  # if you want to tell brooklyn to assign a location at deploy time, as part of the template, this is the current way.
  # it can also be done with camp, referencing this topology template.
  groups:
    add_brooklyn_location:
      members: [ frontend , backend , mysql_server ]
      policies:
      - brooklyn.location: localhost

